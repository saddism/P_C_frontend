{"ast":null,"code":"import Mock from \"mockjs\";\n\n// 注册接口\nMock.mock(\"/api/auth/register\", \"post\", options => {\n  const {\n    email,\n    username\n  } = JSON.parse(options.body);\n\n  // 模拟邮箱已存在的情况\n  if (email === \"exists@example.com\") {\n    return {\n      status: 409,\n      message: \"邮箱已被注册\"\n    };\n  }\n\n  // 模拟用户名已存在的情况\n  if (username === \"existinguser\") {\n    return {\n      status: 409,\n      message: \"用户名已被使用\"\n    };\n  }\n  return {\n    status: 201,\n    message: \"注册成功，请查收验证邮件\"\n  };\n});\n\n// 邮箱验证接口\nMock.mock(\"/api/auth/verify-email\", \"post\", options => {\n  const {\n    code\n  } = JSON.parse(options.body);\n  if (code === \"000000\") {\n    return {\n      status: 400,\n      message: \"验证码已过期\"\n    };\n  }\n  if (code === \"123456\") {\n    return {\n      status: 200,\n      message: \"邮箱验证成功\"\n    };\n  }\n  return {\n    status: 400,\n    message: \"验证码错误\"\n  };\n});\n\n// 登录接口\nMock.mock(\"/api/auth/login\", \"post\", options => {\n  const {\n    email,\n    password\n  } = JSON.parse(options.body);\n  if (email === \"unverified@example.com\") {\n    return {\n      status: 403,\n      message: \"邮箱未验证\"\n    };\n  }\n  if (password === \"wrongpassword\") {\n    return {\n      status: 401,\n      message: \"邮箱或密码错误\"\n    };\n  }\n  return {\n    status: 200,\n    data: {\n      token: \"mock-jwt-token\",\n      user: {\n        email,\n        username: \"mockuser\"\n      }\n    }\n  };\n});\n\n// 重发验证码接口\nMock.mock(\"/api/auth/resend-verification\", \"post\", () => {\n  return {\n    status: 200,\n    message: \"验证码已重新发送\"\n  };\n});","map":{"version":3,"names":["Mock","mock","options","email","username","JSON","parse","body","status","message","code","password","data","token","user"],"sources":["/home/ubuntu/repos/P_C_frontend/src/mock/index.js"],"sourcesContent":["import Mock from \"mockjs\";\n\n// 注册接口\nMock.mock(\"/api/auth/register\", \"post\", (options) => {\n  const { email, username } = JSON.parse(options.body);\n\n  // 模拟邮箱已存在的情况\n  if (email === \"exists@example.com\") {\n    return {\n      status: 409,\n      message: \"邮箱已被注册\",\n    };\n  }\n\n  // 模拟用户名已存在的情况\n  if (username === \"existinguser\") {\n    return {\n      status: 409,\n      message: \"用户名已被使用\",\n    };\n  }\n\n  return {\n    status: 201,\n    message: \"注册成功，请查收验证邮件\",\n  };\n});\n\n// 邮箱验证接口\nMock.mock(\"/api/auth/verify-email\", \"post\", (options) => {\n  const { code } = JSON.parse(options.body);\n\n  if (code === \"000000\") {\n    return {\n      status: 400,\n      message: \"验证码已过期\",\n    };\n  }\n\n  if (code === \"123456\") {\n    return {\n      status: 200,\n      message: \"邮箱验证成功\",\n    };\n  }\n\n  return {\n    status: 400,\n    message: \"验证码错误\",\n  };\n});\n\n// 登录接口\nMock.mock(\"/api/auth/login\", \"post\", (options) => {\n  const { email, password } = JSON.parse(options.body);\n\n  if (email === \"unverified@example.com\") {\n    return {\n      status: 403,\n      message: \"邮箱未验证\",\n    };\n  }\n\n  if (password === \"wrongpassword\") {\n    return {\n      status: 401,\n      message: \"邮箱或密码错误\",\n    };\n  }\n\n  return {\n    status: 200,\n    data: {\n      token: \"mock-jwt-token\",\n      user: {\n        email,\n        username: \"mockuser\",\n      },\n    },\n  };\n});\n\n// 重发验证码接口\nMock.mock(\"/api/auth/resend-verification\", \"post\", () => {\n  return {\n    status: 200,\n    message: \"验证码已重新发送\",\n  };\n});\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,QAAQ;;AAEzB;AACAA,IAAI,CAACC,IAAI,CAAC,oBAAoB,EAAE,MAAM,EAAGC,OAAO,IAAK;EACnD,MAAM;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACJ,OAAO,CAACK,IAAI,CAAC;;EAEpD;EACA,IAAIJ,KAAK,KAAK,oBAAoB,EAAE;IAClC,OAAO;MACLK,MAAM,EAAE,GAAG;MACXC,OAAO,EAAE;IACX,CAAC;EACH;;EAEA;EACA,IAAIL,QAAQ,KAAK,cAAc,EAAE;IAC/B,OAAO;MACLI,MAAM,EAAE,GAAG;MACXC,OAAO,EAAE;IACX,CAAC;EACH;EAEA,OAAO;IACLD,MAAM,EAAE,GAAG;IACXC,OAAO,EAAE;EACX,CAAC;AACH,CAAC,CAAC;;AAEF;AACAT,IAAI,CAACC,IAAI,CAAC,wBAAwB,EAAE,MAAM,EAAGC,OAAO,IAAK;EACvD,MAAM;IAAEQ;EAAK,CAAC,GAAGL,IAAI,CAACC,KAAK,CAACJ,OAAO,CAACK,IAAI,CAAC;EAEzC,IAAIG,IAAI,KAAK,QAAQ,EAAE;IACrB,OAAO;MACLF,MAAM,EAAE,GAAG;MACXC,OAAO,EAAE;IACX,CAAC;EACH;EAEA,IAAIC,IAAI,KAAK,QAAQ,EAAE;IACrB,OAAO;MACLF,MAAM,EAAE,GAAG;MACXC,OAAO,EAAE;IACX,CAAC;EACH;EAEA,OAAO;IACLD,MAAM,EAAE,GAAG;IACXC,OAAO,EAAE;EACX,CAAC;AACH,CAAC,CAAC;;AAEF;AACAT,IAAI,CAACC,IAAI,CAAC,iBAAiB,EAAE,MAAM,EAAGC,OAAO,IAAK;EAChD,MAAM;IAAEC,KAAK;IAAEQ;EAAS,CAAC,GAAGN,IAAI,CAACC,KAAK,CAACJ,OAAO,CAACK,IAAI,CAAC;EAEpD,IAAIJ,KAAK,KAAK,wBAAwB,EAAE;IACtC,OAAO;MACLK,MAAM,EAAE,GAAG;MACXC,OAAO,EAAE;IACX,CAAC;EACH;EAEA,IAAIE,QAAQ,KAAK,eAAe,EAAE;IAChC,OAAO;MACLH,MAAM,EAAE,GAAG;MACXC,OAAO,EAAE;IACX,CAAC;EACH;EAEA,OAAO;IACLD,MAAM,EAAE,GAAG;IACXI,IAAI,EAAE;MACJC,KAAK,EAAE,gBAAgB;MACvBC,IAAI,EAAE;QACJX,KAAK;QACLC,QAAQ,EAAE;MACZ;IACF;EACF,CAAC;AACH,CAAC,CAAC;;AAEF;AACAJ,IAAI,CAACC,IAAI,CAAC,+BAA+B,EAAE,MAAM,EAAE,MAAM;EACvD,OAAO;IACLO,MAAM,EAAE,GAAG;IACXC,OAAO,EAAE;EACX,CAAC;AACH,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
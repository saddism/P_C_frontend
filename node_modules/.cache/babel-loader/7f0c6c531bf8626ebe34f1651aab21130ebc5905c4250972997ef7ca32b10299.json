{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, reactive } from \"vue\";\nimport { useRouter } from \"vue-router\";\nimport { ElMessage } from \"element-plus\";\nimport { api } from \"../utils/api\";\nexport default {\n  name: \"UserLogin\",\n  setup() {\n    const router = useRouter();\n    const loginForm = ref(null);\n    const loading = ref(false);\n    const form = reactive({\n      email: \"\",\n      password: \"\"\n    });\n    const rules = {\n      email: [{\n        required: true,\n        message: \"请输入邮箱\",\n        trigger: \"blur\"\n      }, {\n        type: \"email\",\n        message: \"请输入正确的邮箱格式\",\n        trigger: \"blur\"\n      }],\n      password: [{\n        required: true,\n        message: \"请输入密码\",\n        trigger: \"blur\"\n      }]\n    };\n    const handleLogin = async () => {\n      if (!loginForm.value) {\n        ElMessage.error('表单验证失败');\n        return;\n      }\n      try {\n        const valid = await new Promise(resolve => {\n          loginForm.value.validate(isValid => resolve(isValid));\n        }).catch(() => false);\n        if (!valid) {\n          ElMessage.error('请检查输入信息');\n          return;\n        }\n        loading.value = true;\n        const response = await api.post('https://auth-api-nvdempim.fly.dev/api/auth/login', form);\n        if (response.data.status === 200) {\n          const {\n            access_token\n          } = response.data;\n          localStorage.setItem('token', access_token);\n          ElMessage.success('登录成功');\n          await router.push({\n            path: '/',\n            query: {}\n          });\n        }\n      } catch (error) {\n        const message = error.response?.data?.message || '登录失败，请重试';\n        ElMessage.error(message);\n      } finally {\n        loading.value = false;\n      }\n    };\n    return {\n      loginForm,\n      form,\n      rules,\n      loading,\n      handleLogin\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","useRouter","ElMessage","api","name","setup","router","loginForm","loading","form","email","password","rules","required","message","trigger","type","handleLogin","value","error","valid","Promise","resolve","validate","isValid","catch","response","post","data","status","access_token","localStorage","setItem","success","push","path","query"],"sources":["/home/ubuntu/repos/P_C_frontend/src/views/Login.vue"],"sourcesContent":["<template>\n  <div class=\"login-container\">\n    <el-card class=\"login-card\">\n      <h2>用户登录</h2>\n      <el-form\n        ref=\"loginForm\"\n        :model=\"form\"\n        :rules=\"rules\"\n        label-width=\"80px\"\n        class=\"login-form\"\n      >\n        <el-form-item label=\"邮箱\" prop=\"email\">\n          <el-input\n            v-model=\"form.email\"\n            type=\"email\"\n            placeholder=\"请输入邮箱\"\n            data-test=\"email-input\"\n          ></el-input>\n        </el-form-item>\n\n        <el-form-item label=\"密码\" prop=\"password\">\n          <el-input\n            v-model=\"form.password\"\n            type=\"password\"\n            placeholder=\"请输入密码\"\n            data-test=\"password-input\"\n          ></el-input>\n        </el-form-item>\n\n        <el-form-item>\n          <el-button type=\"primary\" @click=\"handleLogin\" :loading=\"loading\" data-test=\"login-button\">\n            登录\n          </el-button>\n          <el-button @click=\"$router.push({ path: '/register', query: $route.query })\">注册账号</el-button>\n        </el-form-item>\n      </el-form>\n    </el-card>\n  </div>\n</template>\n\n<script>\nimport { ref, reactive } from \"vue\";\nimport { useRouter } from \"vue-router\";\nimport { ElMessage } from \"element-plus\";\nimport { api } from \"../utils/api\";\n\nexport default {\n  name: \"UserLogin\",\n  setup() {\n    const router = useRouter();\n    const loginForm = ref(null);\n    const loading = ref(false);\n\n    const form = reactive({\n      email: \"\",\n      password: \"\",\n    });\n\n    const rules = {\n      email: [\n        { required: true, message: \"请输入邮箱\", trigger: \"blur\" },\n        { type: \"email\", message: \"请输入正确的邮箱格式\", trigger: \"blur\" },\n      ],\n      password: [{ required: true, message: \"请输入密码\", trigger: \"blur\" }],\n    };\n\n    const handleLogin = async () => {\n      if (!loginForm.value) {\n        ElMessage.error('表单验证失败')\n        return\n      }\n\n      try {\n        const valid = await new Promise((resolve) => {\n          loginForm.value.validate((isValid) => resolve(isValid))\n        }).catch(() => false)\n\n        if (!valid) {\n          ElMessage.error('请检查输入信息')\n          return\n        }\n\n        loading.value = true\n        const response = await api.post('https://auth-api-nvdempim.fly.dev/api/auth/login', form)\n\n        if (response.data.status === 200) {\n          const { access_token } = response.data\n          localStorage.setItem('token', access_token)\n          ElMessage.success('登录成功')\n          await router.push({ path: '/', query: {} })\n        }\n      } catch (error) {\n        const message = error.response?.data?.message || '登录失败，请重试'\n        ElMessage.error(message)\n      } finally {\n        loading.value = false\n      }\n    };\n\n    return {\n      loginForm,\n      form,\n      rules,\n      loading,\n      handleLogin,\n    };\n  },\n};\n</script>\n\n<style scoped>\n.login-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n  background-color: #f5f7fa;\n}\n\n.login-card {\n  width: 480px;\n}\n\n.login-form {\n  margin-top: 20px;\n}\n</style>\n"],"mappings":";AAyCA,SAASA,GAAG,EAAEC,QAAO,QAAS,KAAK;AACnC,SAASC,SAAQ,QAAS,YAAY;AACtC,SAASC,SAAQ,QAAS,cAAc;AACxC,SAASC,GAAE,QAAS,cAAc;AAElC,eAAe;EACbC,IAAI,EAAE,WAAW;EACjBC,KAAKA,CAAA,EAAG;IACN,MAAMC,MAAK,GAAIL,SAAS,CAAC,CAAC;IAC1B,MAAMM,SAAQ,GAAIR,GAAG,CAAC,IAAI,CAAC;IAC3B,MAAMS,OAAM,GAAIT,GAAG,CAAC,KAAK,CAAC;IAE1B,MAAMU,IAAG,GAAIT,QAAQ,CAAC;MACpBU,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE;IACZ,CAAC,CAAC;IAEF,MAAMC,KAAI,GAAI;MACZF,KAAK,EAAE,CACL;QAAEG,QAAQ,EAAE,IAAI;QAAEC,OAAO,EAAE,OAAO;QAAEC,OAAO,EAAE;MAAO,CAAC,EACrD;QAAEC,IAAI,EAAE,OAAO;QAAEF,OAAO,EAAE,YAAY;QAAEC,OAAO,EAAE;MAAO,CAAC,CAC1D;MACDJ,QAAQ,EAAE,CAAC;QAAEE,QAAQ,EAAE,IAAI;QAAEC,OAAO,EAAE,OAAO;QAAEC,OAAO,EAAE;MAAO,CAAC;IAClE,CAAC;IAED,MAAME,WAAU,GAAI,MAAAA,CAAA,KAAY;MAC9B,IAAI,CAACV,SAAS,CAACW,KAAK,EAAE;QACpBhB,SAAS,CAACiB,KAAK,CAAC,QAAQ;QACxB;MACF;MAEA,IAAI;QACF,MAAMC,KAAI,GAAI,MAAM,IAAIC,OAAO,CAAEC,OAAO,IAAK;UAC3Cf,SAAS,CAACW,KAAK,CAACK,QAAQ,CAAEC,OAAO,IAAKF,OAAO,CAACE,OAAO,CAAC;QACxD,CAAC,CAAC,CAACC,KAAK,CAAC,MAAM,KAAK;QAEpB,IAAI,CAACL,KAAK,EAAE;UACVlB,SAAS,CAACiB,KAAK,CAAC,SAAS;UACzB;QACF;QAEAX,OAAO,CAACU,KAAI,GAAI,IAAG;QACnB,MAAMQ,QAAO,GAAI,MAAMvB,GAAG,CAACwB,IAAI,CAAC,kDAAkD,EAAElB,IAAI;QAExF,IAAIiB,QAAQ,CAACE,IAAI,CAACC,MAAK,KAAM,GAAG,EAAE;UAChC,MAAM;YAAEC;UAAa,IAAIJ,QAAQ,CAACE,IAAG;UACrCG,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,YAAY;UAC1C5B,SAAS,CAAC+B,OAAO,CAAC,MAAM;UACxB,MAAM3B,MAAM,CAAC4B,IAAI,CAAC;YAAEC,IAAI,EAAE,GAAG;YAAEC,KAAK,EAAE,CAAC;UAAE,CAAC;QAC5C;MACF,EAAE,OAAOjB,KAAK,EAAE;QACd,MAAML,OAAM,GAAIK,KAAK,CAACO,QAAQ,EAAEE,IAAI,EAAEd,OAAM,IAAK,UAAS;QAC1DZ,SAAS,CAACiB,KAAK,CAACL,OAAO;MACzB,UAAU;QACRN,OAAO,CAACU,KAAI,GAAI,KAAI;MACtB;IACF,CAAC;IAED,OAAO;MACLX,SAAS;MACTE,IAAI;MACJG,KAAK;MACLJ,OAAO;MACPS;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
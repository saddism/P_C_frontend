{"ast":null,"code":"import \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.search.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.url-search-params.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport Mock from 'mockjs';\nimport './video.mock';\n\n// Enable mock based on URL parameter\nvar enableMock = new URLSearchParams(window.location.search).get('mock') === '1';\n\n// Configure mock behavior based on URL parameter\nMock.setup({\n  timeout: '200-600'\n});\nif (!enableMock) {\n  // No need to reset mocks, just don't define them\n} else {\n  // 注册接口\n  Mock.mock('/api/auth/register', 'post', function (options) {\n    var _JSON$parse = JSON.parse(options.body),\n      email = _JSON$parse.email,\n      username = _JSON$parse.username;\n\n    // 模拟邮箱已存在的情况\n    if (email === 'exists@example.com') {\n      return {\n        status: 409,\n        message: '邮箱已被注册'\n      };\n    }\n\n    // 模拟用户名已存在的情况\n    if (username === 'existinguser') {\n      return {\n        status: 409,\n        message: '用户名已被使用'\n      };\n    }\n    return {\n      status: 201,\n      message: '注册成功，请查收验证邮件'\n    };\n  });\n\n  // 邮箱验证接口\n  Mock.mock('/api/auth/verify-email', 'post', function (options) {\n    var _JSON$parse2 = JSON.parse(options.body),\n      code = _JSON$parse2.code;\n    if (code === '000000') {\n      return {\n        status: 400,\n        message: '验证码已过期'\n      };\n    }\n    if (code === '123456') {\n      return {\n        status: 200,\n        message: '邮箱验证成功'\n      };\n    }\n    return {\n      status: 400,\n      message: '验证码错误'\n    };\n  });\n\n  // 登录接口\n  Mock.mock('/api/auth/login', 'post', function (options) {\n    var _JSON$parse3 = JSON.parse(options.body),\n      email = _JSON$parse3.email,\n      password = _JSON$parse3.password;\n    if (email === 'unverified@example.com') {\n      return {\n        status: 403,\n        message: '邮箱未验证'\n      };\n    }\n    if (password === 'wrongpassword') {\n      return {\n        status: 401,\n        message: '邮箱或密码错误'\n      };\n    }\n    return {\n      status: 200,\n      data: {\n        token: 'mock-jwt-token',\n        user: {\n          email: email,\n          username: 'mockuser'\n        }\n      }\n    };\n  });\n\n  // 重发验证码接口\n  Mock.mock('/api/auth/resend-verification', 'post', function () {\n    return {\n      status: 200,\n      message: '验证码已重新发送'\n    };\n  });\n}\n\n// Export enableMock for use in router navigation guards\nexport default enableMock;","map":{"version":3,"names":["Mock","enableMock","URLSearchParams","window","location","search","get","setup","timeout","mock","options","_JSON$parse","JSON","parse","body","email","username","status","message","_JSON$parse2","code","_JSON$parse3","password","data","token","user"],"sources":["/home/ubuntu/repos/P_C_frontend/src/mock/index.js"],"sourcesContent":["import Mock from 'mockjs'\nimport './video.mock'\n\n// Enable mock based on URL parameter\nconst enableMock = new URLSearchParams(window.location.search).get('mock') === '1'\n\n// Configure mock behavior based on URL parameter\nMock.setup({ timeout: '200-600' })\nif (!enableMock) {\n  // No need to reset mocks, just don't define them\n} else {\n  // 注册接口\n  Mock.mock('/api/auth/register', 'post', (options) => {\n    const { email, username } = JSON.parse(options.body)\n\n    // 模拟邮箱已存在的情况\n    if (email === 'exists@example.com') {\n      return {\n        status: 409,\n        message: '邮箱已被注册'\n      }\n    }\n\n    // 模拟用户名已存在的情况\n    if (username === 'existinguser') {\n      return {\n        status: 409,\n        message: '用户名已被使用'\n      }\n    }\n\n    return {\n      status: 201,\n      message: '注册成功，请查收验证邮件'\n    }\n  })\n\n  // 邮箱验证接口\n  Mock.mock('/api/auth/verify-email', 'post', (options) => {\n    const { code } = JSON.parse(options.body)\n\n    if (code === '000000') {\n      return {\n        status: 400,\n        message: '验证码已过期'\n      }\n    }\n\n    if (code === '123456') {\n      return {\n        status: 200,\n        message: '邮箱验证成功'\n      }\n    }\n\n    return {\n      status: 400,\n      message: '验证码错误'\n    }\n  })\n\n  // 登录接口\n  Mock.mock('/api/auth/login', 'post', (options) => {\n    const { email, password } = JSON.parse(options.body)\n\n    if (email === 'unverified@example.com') {\n      return {\n        status: 403,\n        message: '邮箱未验证'\n      }\n    }\n\n    if (password === 'wrongpassword') {\n      return {\n        status: 401,\n        message: '邮箱或密码错误'\n      }\n    }\n\n    return {\n      status: 200,\n      data: {\n        token: 'mock-jwt-token',\n        user: {\n          email,\n          username: 'mockuser'\n        }\n      }\n    }\n  })\n\n  // 重发验证码接口\n  Mock.mock('/api/auth/resend-verification', 'post', () => {\n    return {\n      status: 200,\n      message: '验证码已重新发送'\n    }\n  })\n}\n\n// Export enableMock for use in router navigation guards\nexport default enableMock\n"],"mappings":";;;;;;;;;;AAAA,OAAOA,IAAI,MAAM,QAAQ;AACzB,OAAO,cAAc;;AAErB;AACA,IAAMC,UAAU,GAAG,IAAIC,eAAe,CAACC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAACC,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG;;AAElF;AACAN,IAAI,CAACO,KAAK,CAAC;EAAEC,OAAO,EAAE;AAAU,CAAC,CAAC;AAClC,IAAI,CAACP,UAAU,EAAE;EACf;AAAA,CACD,MAAM;EACL;EACAD,IAAI,CAACS,IAAI,CAAC,oBAAoB,EAAE,MAAM,EAAE,UAACC,OAAO,EAAK;IACnD,IAAAC,WAAA,GAA4BC,IAAI,CAACC,KAAK,CAACH,OAAO,CAACI,IAAI,CAAC;MAA5CC,KAAK,GAAAJ,WAAA,CAALI,KAAK;MAAEC,QAAQ,GAAAL,WAAA,CAARK,QAAQ;;IAEvB;IACA,IAAID,KAAK,KAAK,oBAAoB,EAAE;MAClC,OAAO;QACLE,MAAM,EAAE,GAAG;QACXC,OAAO,EAAE;MACX,CAAC;IACH;;IAEA;IACA,IAAIF,QAAQ,KAAK,cAAc,EAAE;MAC/B,OAAO;QACLC,MAAM,EAAE,GAAG;QACXC,OAAO,EAAE;MACX,CAAC;IACH;IAEA,OAAO;MACLD,MAAM,EAAE,GAAG;MACXC,OAAO,EAAE;IACX,CAAC;EACH,CAAC,CAAC;;EAEF;EACAlB,IAAI,CAACS,IAAI,CAAC,wBAAwB,EAAE,MAAM,EAAE,UAACC,OAAO,EAAK;IACvD,IAAAS,YAAA,GAAiBP,IAAI,CAACC,KAAK,CAACH,OAAO,CAACI,IAAI,CAAC;MAAjCM,IAAI,GAAAD,YAAA,CAAJC,IAAI;IAEZ,IAAIA,IAAI,KAAK,QAAQ,EAAE;MACrB,OAAO;QACLH,MAAM,EAAE,GAAG;QACXC,OAAO,EAAE;MACX,CAAC;IACH;IAEA,IAAIE,IAAI,KAAK,QAAQ,EAAE;MACrB,OAAO;QACLH,MAAM,EAAE,GAAG;QACXC,OAAO,EAAE;MACX,CAAC;IACH;IAEA,OAAO;MACLD,MAAM,EAAE,GAAG;MACXC,OAAO,EAAE;IACX,CAAC;EACH,CAAC,CAAC;;EAEF;EACAlB,IAAI,CAACS,IAAI,CAAC,iBAAiB,EAAE,MAAM,EAAE,UAACC,OAAO,EAAK;IAChD,IAAAW,YAAA,GAA4BT,IAAI,CAACC,KAAK,CAACH,OAAO,CAACI,IAAI,CAAC;MAA5CC,KAAK,GAAAM,YAAA,CAALN,KAAK;MAAEO,QAAQ,GAAAD,YAAA,CAARC,QAAQ;IAEvB,IAAIP,KAAK,KAAK,wBAAwB,EAAE;MACtC,OAAO;QACLE,MAAM,EAAE,GAAG;QACXC,OAAO,EAAE;MACX,CAAC;IACH;IAEA,IAAII,QAAQ,KAAK,eAAe,EAAE;MAChC,OAAO;QACLL,MAAM,EAAE,GAAG;QACXC,OAAO,EAAE;MACX,CAAC;IACH;IAEA,OAAO;MACLD,MAAM,EAAE,GAAG;MACXM,IAAI,EAAE;QACJC,KAAK,EAAE,gBAAgB;QACvBC,IAAI,EAAE;UACJV,KAAK,EAALA,KAAK;UACLC,QAAQ,EAAE;QACZ;MACF;IACF,CAAC;EACH,CAAC,CAAC;;EAEF;EACAhB,IAAI,CAACS,IAAI,CAAC,+BAA+B,EAAE,MAAM,EAAE,YAAM;IACvD,OAAO;MACLQ,MAAM,EAAE,GAAG;MACXC,OAAO,EAAE;IACX,CAAC;EACH,CAAC,CAAC;AACJ;;AAEA;AACA,eAAejB,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _regeneratorRuntime from \"/home/ubuntu/repos/P_C_frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/ubuntu/repos/P_C_frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { ref, reactive } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { ElMessage } from 'element-plus';\nimport { auth } from '@/services/api';\nexport default {\n  name: 'Register',\n  setup: function setup() {\n    var router = useRouter();\n    var registerForm = ref(null);\n    var loading = ref(false);\n    var showVerificationCode = ref(false);\n    var countdown = ref(0);\n    var form = reactive({\n      email: '',\n      username: '',\n      password: '',\n      code: ''\n    });\n    var rules = {\n      email: [{\n        required: true,\n        message: '请输入邮箱',\n        trigger: 'blur'\n      }, {\n        type: 'email',\n        message: '请输入正确的邮箱格式',\n        trigger: 'blur'\n      }],\n      username: [{\n        required: true,\n        message: '请输入用户名',\n        trigger: 'blur'\n      }, {\n        min: 3,\n        max: 20,\n        message: '用户名长度在3到20个字符之间',\n        trigger: 'blur'\n      }],\n      password: [{\n        required: true,\n        message: '请输入密码',\n        trigger: 'blur'\n      }, {\n        min: 8,\n        message: '密码长度至少为8个字符',\n        trigger: 'blur'\n      }],\n      code: [{\n        required: true,\n        message: '请输入验证码',\n        trigger: 'blur'\n      }, {\n        len: 6,\n        message: '验证码长度为6位',\n        trigger: 'blur'\n      }]\n    };\n    var startCountdown = function startCountdown() {\n      countdown.value = 60;\n      var timer = setInterval(function () {\n        countdown.value--;\n        if (countdown.value <= 0) {\n          clearInterval(timer);\n        }\n      }, 1000);\n    };\n    var handleSendCode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return axios.post('/api/auth/resend-verification', {\n                email: form.email\n              });\n            case 3:\n              response = _context.sent;\n              if (response.data.status === 200) {\n                startCountdown();\n                showVerificationCode.value = true;\n                ElMessage.success('验证码已发送，请查收邮件');\n              }\n              _context.next = 10;\n              break;\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              ElMessage.error('发送验证码失败，请重试');\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 7]]);\n      }));\n      return function handleSendCode() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    var handleRegister = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (registerForm.value) {\n                _context3.next = 2;\n                break;\n              }\n              return _context3.abrupt(\"return\");\n            case 2:\n              _context3.next = 4;\n              return registerForm.value.validate(/*#__PURE__*/function () {\n                var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(valid) {\n                  var response, _error$response, message;\n                  return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                    while (1) switch (_context2.prev = _context2.next) {\n                      case 0:\n                        if (!valid) {\n                          _context2.next = 16;\n                          break;\n                        }\n                        loading.value = true;\n                        _context2.prev = 2;\n                        _context2.next = 5;\n                        return auth.register(form);\n                      case 5:\n                        response = _context2.sent;\n                        if (response.data.status === 201) {\n                          router.push('/register-success');\n                        }\n                        _context2.next = 13;\n                        break;\n                      case 9:\n                        _context2.prev = 9;\n                        _context2.t0 = _context2[\"catch\"](2);\n                        message = ((_error$response = _context2.t0.response) === null || _error$response === void 0 || (_error$response = _error$response.data) === null || _error$response === void 0 ? void 0 : _error$response.message) || '注册失败，请重试';\n                        ElMessage.error(message);\n                      case 13:\n                        _context2.prev = 13;\n                        loading.value = false;\n                        return _context2.finish(13);\n                      case 16:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }, _callee2, null, [[2, 9, 13, 16]]);\n                }));\n                return function (_x) {\n                  return _ref3.apply(this, arguments);\n                };\n              }());\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }));\n      return function handleRegister() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    return {\n      registerForm: registerForm,\n      form: form,\n      rules: rules,\n      loading: loading,\n      showVerificationCode: showVerificationCode,\n      countdown: countdown,\n      handleSendCode: handleSendCode,\n      handleRegister: handleRegister\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","useRouter","ElMessage","auth","name","setup","router","registerForm","loading","showVerificationCode","countdown","form","email","username","password","code","rules","required","message","trigger","type","min","max","len","startCountdown","value","timer","setInterval","clearInterval","handleSendCode","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_callee$","_context","prev","next","axios","post","sent","data","status","success","t0","error","stop","apply","arguments","handleRegister","_ref2","_callee3","_callee3$","_context3","abrupt","validate","_ref3","_callee2","valid","_error$response","_callee2$","_context2","register","push","finish","_x"],"sources":["/home/ubuntu/repos/P_C_frontend/src/views/Register.vue"],"sourcesContent":["<template>\n  <div class=\"register-container\">\n    <el-card class=\"register-card\">\n      <h2>用户注册</h2>\n      <el-form\n        ref=\"registerForm\"\n        :model=\"form\"\n        :rules=\"rules\"\n        label-width=\"80px\"\n        class=\"register-form\"\n      >\n        <el-form-item label=\"邮箱\" prop=\"email\">\n          <el-input v-model=\"form.email\" type=\"email\" placeholder=\"请输入邮箱\"></el-input>\n        </el-form-item>\n\n        <el-form-item label=\"用户名\" prop=\"username\">\n          <el-input v-model=\"form.username\" placeholder=\"请输入用户名\"></el-input>\n        </el-form-item>\n\n        <el-form-item label=\"密码\" prop=\"password\">\n          <el-input v-model=\"form.password\" type=\"password\" placeholder=\"请输入密码\"></el-input>\n        </el-form-item>\n\n        <el-form-item label=\"验证码\" prop=\"code\" v-if=\"showVerificationCode\">\n          <el-input v-model=\"form.code\" placeholder=\"请输入验证码\">\n            <template #append>\n              <el-button\n                :disabled=\"countdown > 0\"\n                @click=\"handleSendCode\"\n              >\n                {{ countdown > 0 ? `${countdown}秒后重试` : '获取验证码' }}\n              </el-button>\n            </template>\n          </el-input>\n        </el-form-item>\n\n        <el-form-item>\n          <el-button type=\"primary\" @click=\"handleRegister\" :loading=\"loading\">\n            注册\n          </el-button>\n          <el-button @click=\"$router.push('/login')\">返回登录</el-button>\n        </el-form-item>\n      </el-form>\n    </el-card>\n  </div>\n</template>\n\n<script>\nimport { ref, reactive } from 'vue'\nimport { useRouter } from 'vue-router'\nimport { ElMessage } from 'element-plus'\nimport { auth } from '@/services/api'\n\nexport default {\n  name: 'Register',\n  setup() {\n    const router = useRouter()\n    const registerForm = ref(null)\n    const loading = ref(false)\n    const showVerificationCode = ref(false)\n    const countdown = ref(0)\n\n    const form = reactive({\n      email: '',\n      username: '',\n      password: '',\n      code: ''\n    })\n\n    const rules = {\n      email: [\n        { required: true, message: '请输入邮箱', trigger: 'blur' },\n        { type: 'email', message: '请输入正确的邮箱格式', trigger: 'blur' }\n      ],\n      username: [\n        { required: true, message: '请输入用户名', trigger: 'blur' },\n        { min: 3, max: 20, message: '用户名长度在3到20个字符之间', trigger: 'blur' }\n      ],\n      password: [\n        { required: true, message: '请输入密码', trigger: 'blur' },\n        { min: 8, message: '密码长度至少为8个字符', trigger: 'blur' }\n      ],\n      code: [\n        { required: true, message: '请输入验证码', trigger: 'blur' },\n        { len: 6, message: '验证码长度为6位', trigger: 'blur' }\n      ]\n    }\n\n    const startCountdown = () => {\n      countdown.value = 60\n      const timer = setInterval(() => {\n        countdown.value--\n        if (countdown.value <= 0) {\n          clearInterval(timer)\n        }\n      }, 1000)\n    }\n\n    const handleSendCode = async () => {\n      try {\n        const response = await axios.post('/api/auth/resend-verification', {\n          email: form.email\n        })\n        if (response.data.status === 200) {\n          startCountdown()\n          showVerificationCode.value = true\n          ElMessage.success('验证码已发送，请查收邮件')\n        }\n      } catch (error) {\n        ElMessage.error('发送验证码失败，请重试')\n      }\n    }\n\n    const handleRegister = async () => {\n      if (!registerForm.value) return\n\n      await registerForm.value.validate(async (valid) => {\n        if (valid) {\n          loading.value = true\n          try {\n            const response = await auth.register(form)\n            if (response.data.status === 201) {\n              router.push('/register-success')\n            }\n          } catch (error) {\n            const message = error.response?.data?.message || '注册失败，请重试'\n            ElMessage.error(message)\n          } finally {\n            loading.value = false\n          }\n        }\n      })\n    }\n\n    return {\n      registerForm,\n      form,\n      rules,\n      loading,\n      showVerificationCode,\n      countdown,\n      handleSendCode,\n      handleRegister\n    }\n  }\n}\n</script>\n\n<style scoped>\n.register-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n  background-color: #f5f7fa;\n}\n\n.register-card {\n  width: 480px;\n}\n\n.register-form {\n  margin-top: 20px;\n}\n</style>\n"],"mappings":";;;;AAgDA,SAASA,GAAG,EAAEC,QAAO,QAAS,KAAI;AAClC,SAASC,SAAQ,QAAS,YAAW;AACrC,SAASC,SAAQ,QAAS,cAAa;AACvC,SAASC,IAAG,QAAS,gBAAe;AAEpC,eAAe;EACbC,IAAI,EAAE,UAAU;EAChBC,KAAK,WAALA,KAAKA,CAAA,EAAG;IACN,IAAMC,MAAK,GAAIL,SAAS,CAAC;IACzB,IAAMM,YAAW,GAAIR,GAAG,CAAC,IAAI;IAC7B,IAAMS,OAAM,GAAIT,GAAG,CAAC,KAAK;IACzB,IAAMU,oBAAmB,GAAIV,GAAG,CAAC,KAAK;IACtC,IAAMW,SAAQ,GAAIX,GAAG,CAAC,CAAC;IAEvB,IAAMY,IAAG,GAAIX,QAAQ,CAAC;MACpBY,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,EAAE;MACZC,IAAI,EAAE;IACR,CAAC;IAED,IAAMC,KAAI,GAAI;MACZJ,KAAK,EAAE,CACL;QAAEK,QAAQ,EAAE,IAAI;QAAEC,OAAO,EAAE,OAAO;QAAEC,OAAO,EAAE;MAAO,CAAC,EACrD;QAAEC,IAAI,EAAE,OAAO;QAAEF,OAAO,EAAE,YAAY;QAAEC,OAAO,EAAE;MAAO,EACzD;MACDN,QAAQ,EAAE,CACR;QAAEI,QAAQ,EAAE,IAAI;QAAEC,OAAO,EAAE,QAAQ;QAAEC,OAAO,EAAE;MAAO,CAAC,EACtD;QAAEE,GAAG,EAAE,CAAC;QAAEC,GAAG,EAAE,EAAE;QAAEJ,OAAO,EAAE,iBAAiB;QAAEC,OAAO,EAAE;MAAO,EAChE;MACDL,QAAQ,EAAE,CACR;QAAEG,QAAQ,EAAE,IAAI;QAAEC,OAAO,EAAE,OAAO;QAAEC,OAAO,EAAE;MAAO,CAAC,EACrD;QAAEE,GAAG,EAAE,CAAC;QAAEH,OAAO,EAAE,aAAa;QAAEC,OAAO,EAAE;MAAO,EACnD;MACDJ,IAAI,EAAE,CACJ;QAAEE,QAAQ,EAAE,IAAI;QAAEC,OAAO,EAAE,QAAQ;QAAEC,OAAO,EAAE;MAAO,CAAC,EACtD;QAAEI,GAAG,EAAE,CAAC;QAAEL,OAAO,EAAE,UAAU;QAAEC,OAAO,EAAE;MAAO;IAEnD;IAEA,IAAMK,cAAa,GAAI,SAAjBA,cAAaA,CAAA,EAAU;MAC3Bd,SAAS,CAACe,KAAI,GAAI,EAAC;MACnB,IAAMC,KAAI,GAAIC,WAAW,CAAC,YAAM;QAC9BjB,SAAS,CAACe,KAAK,EAAC;QAChB,IAAIf,SAAS,CAACe,KAAI,IAAK,CAAC,EAAE;UACxBG,aAAa,CAACF,KAAK;QACrB;MACF,CAAC,EAAE,IAAI;IACT;IAEA,IAAMG,cAAa;MAAA,IAAAC,IAAA,GAAAC,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAAI,SAAAC,QAAA;QAAA,IAAAC,QAAA;QAAA,OAAAH,mBAAA,GAAAI,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAAF,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAE,IAAA;cAAA,OAEIC,KAAK,CAACC,IAAI,CAAC,+BAA+B,EAAE;gBACjE9B,KAAK,EAAED,IAAI,CAACC;cACd,CAAC;YAAA;cAFKuB,QAAO,GAAAG,QAAA,CAAAK,IAAA;cAGb,IAAIR,QAAQ,CAACS,IAAI,CAACC,MAAK,KAAM,GAAG,EAAE;gBAChCrB,cAAc,CAAC;gBACff,oBAAoB,CAACgB,KAAI,GAAI,IAAG;gBAChCvB,SAAS,CAAC4C,OAAO,CAAC,cAAc;cAClC;cAAAR,QAAA,CAAAE,IAAA;cAAA;YAAA;cAAAF,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAS,EAAA,GAAAT,QAAA;cAEApC,SAAS,CAAC8C,KAAK,CAAC,aAAa;YAAA;YAAA;cAAA,OAAAV,QAAA,CAAAW,IAAA;UAAA;QAAA,GAAAf,OAAA;MAAA,CAEjC;MAAA,gBAbML,cAAaA,CAAA;QAAA,OAAAC,IAAA,CAAAoB,KAAA,OAAAC,SAAA;MAAA;IAAA,GAanB;IAEA,IAAMC,cAAa;MAAA,IAAAC,KAAA,GAAAtB,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAAI,SAAAqB,SAAA;QAAA,OAAAtB,mBAAA,GAAAI,IAAA,UAAAmB,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAjB,IAAA,GAAAiB,SAAA,CAAAhB,IAAA;YAAA;cAAA,IAChBjC,YAAY,CAACkB,KAAK;gBAAA+B,SAAA,CAAAhB,IAAA;gBAAA;cAAA;cAAA,OAAAgB,SAAA,CAAAC,MAAA;YAAA;cAAAD,SAAA,CAAAhB,IAAA;cAAA,OAEjBjC,YAAY,CAACkB,KAAK,CAACiC,QAAQ;gBAAA,IAAAC,KAAA,GAAA5B,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAAC,SAAA2B,SAAOC,KAAK;kBAAA,IAAA1B,QAAA,EAAA2B,eAAA,EAAA5C,OAAA;kBAAA,OAAAc,mBAAA,GAAAI,IAAA,UAAA2B,UAAAC,SAAA;oBAAA,kBAAAA,SAAA,CAAAzB,IAAA,GAAAyB,SAAA,CAAAxB,IAAA;sBAAA;wBAAA,KACxCqB,KAAK;0BAAAG,SAAA,CAAAxB,IAAA;0BAAA;wBAAA;wBACPhC,OAAO,CAACiB,KAAI,GAAI,IAAG;wBAAAuC,SAAA,CAAAzB,IAAA;wBAAAyB,SAAA,CAAAxB,IAAA;wBAAA,OAEMrC,IAAI,CAAC8D,QAAQ,CAACtD,IAAI;sBAAA;wBAAnCwB,QAAO,GAAA6B,SAAA,CAAArB,IAAA;wBACb,IAAIR,QAAQ,CAACS,IAAI,CAACC,MAAK,KAAM,GAAG,EAAE;0BAChCvC,MAAM,CAAC4D,IAAI,CAAC,mBAAmB;wBACjC;wBAAAF,SAAA,CAAAxB,IAAA;wBAAA;sBAAA;wBAAAwB,SAAA,CAAAzB,IAAA;wBAAAyB,SAAA,CAAAjB,EAAA,GAAAiB,SAAA;wBAEM9C,OAAM,GAAI,EAAA4C,eAAA,GAAAE,SAAA,CAAAjB,EAAA,CAAMZ,QAAQ,cAAA2B,eAAA,gBAAAA,eAAA,GAAdA,eAAA,CAAgBlB,IAAI,cAAAkB,eAAA,uBAApBA,eAAA,CAAsB5C,OAAM,KAAK,UAAS;wBAC1DhB,SAAS,CAAC8C,KAAK,CAAC9B,OAAO;sBAAA;wBAAA8C,SAAA,CAAAzB,IAAA;wBAEvB/B,OAAO,CAACiB,KAAI,GAAI,KAAI;wBAAA,OAAAuC,SAAA,CAAAG,MAAA;sBAAA;sBAAA;wBAAA,OAAAH,SAAA,CAAAf,IAAA;oBAAA;kBAAA,GAAAW,QAAA;gBAAA,CAGzB;gBAAA,iBAAAQ,EAAA;kBAAA,OAAAT,KAAA,CAAAT,KAAA,OAAAC,SAAA;gBAAA;cAAA;YAAA;YAAA;cAAA,OAAAK,SAAA,CAAAP,IAAA;UAAA;QAAA,GAAAK,QAAA;MAAA,CACH;MAAA,gBAnBMF,cAAaA,CAAA;QAAA,OAAAC,KAAA,CAAAH,KAAA,OAAAC,SAAA;MAAA;IAAA,GAmBnB;IAEA,OAAO;MACL5C,YAAY,EAAZA,YAAY;MACZI,IAAI,EAAJA,IAAI;MACJK,KAAK,EAALA,KAAK;MACLR,OAAO,EAAPA,OAAO;MACPC,oBAAoB,EAApBA,oBAAoB;MACpBC,SAAS,EAATA,SAAS;MACTmB,cAAc,EAAdA,cAAc;MACduB,cAAa,EAAbA;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
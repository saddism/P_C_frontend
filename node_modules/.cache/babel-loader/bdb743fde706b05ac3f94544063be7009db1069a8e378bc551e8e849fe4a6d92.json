{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ElMessage } from 'element-plus';\nimport { api } from '@/utils/api';\nexport default {\n  name: 'VerifyEmail',\n  data() {\n    return {\n      form: {\n        email: '',\n        code: ''\n      },\n      rules: {\n        email: [{\n          required: true,\n          message: '请输入邮箱地址',\n          trigger: 'blur'\n        }, {\n          type: 'email',\n          message: '请输入正确的邮箱地址',\n          trigger: 'blur'\n        }],\n        code: [{\n          required: true,\n          message: '请输入验证码',\n          trigger: 'blur'\n        }, {\n          min: 6,\n          max: 6,\n          message: '验证码长度为6位',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  created() {\n    // Get email from route query\n    this.form.email = this.$route.query.email || '';\n  },\n  methods: {\n    async submitForm() {\n      try {\n        await this.$refs.verifyForm.validate();\n        const response = await api.post('/api/auth/verify-email', this.form);\n        if (response.status === 200) {\n          ElMessage.success('邮箱验证成功');\n          this.$router.push('/login');\n        }\n      } catch (error) {\n        if (error.response?.status === 422) {\n          ElMessage.error('验证失败：验证码无效');\n        } else {\n          ElMessage.error('验证失败，请重试');\n        }\n      }\n    },\n    async resendCode() {\n      try {\n        const response = await api.post('/api/auth/resend-verification', {\n          email: this.form.email\n        });\n        if (response.status === 200) {\n          ElMessage.success('验证码已重新发送');\n        }\n      } catch (error) {\n        ElMessage.error('发送失败，请重试');\n      }\n    }\n  }\n};","map":{"version":3,"names":["ElMessage","api","name","data","form","email","code","rules","required","message","trigger","type","min","max","created","$route","query","methods","submitForm","$refs","verifyForm","validate","response","post","status","success","$router","push","error","resendCode"],"sources":["/home/ubuntu/repos/P_C_frontend/src/views/VerifyEmail.vue"],"sourcesContent":["<template>\n  <div class=\"verify-container\">\n    <el-card class=\"verify-card\">\n      <el-form\n        ref=\"verifyForm\"\n        :model=\"form\"\n        :rules=\"rules\"\n        label-width=\"120px\"\n        class=\"verify-form\"\n      >\n        <h2>邮箱验证</h2>\n        <el-form-item label=\"邮箱\" prop=\"email\">\n          <el-input v-model=\"form.email\" disabled></el-input>\n        </el-form-item>\n        <el-form-item label=\"验证码\" prop=\"code\">\n          <el-input v-model=\"form.code\" placeholder=\"请输入验证码\"></el-input>\n        </el-form-item>\n        <el-form-item>\n          <el-button type=\"primary\" @click=\"submitForm\">验证</el-button>\n          <el-button @click=\"resendCode\">重新发送验证码</el-button>\n        </el-form-item>\n      </el-form>\n    </el-card>\n  </div>\n</template>\n\n<script>\nimport { ElMessage } from 'element-plus'\nimport { api } from '@/utils/api'\n\nexport default {\n  name: 'VerifyEmail',\n  data() {\n    return {\n      form: {\n        email: '',\n        code: ''\n      },\n      rules: {\n        email: [\n          { required: true, message: '请输入邮箱地址', trigger: 'blur' },\n          { type: 'email', message: '请输入正确的邮箱地址', trigger: 'blur' }\n        ],\n        code: [\n          { required: true, message: '请输入验证码', trigger: 'blur' },\n          { min: 6, max: 6, message: '验证码长度为6位', trigger: 'blur' }\n        ]\n      }\n    }\n  },\n  created() {\n    // Get email from route query\n    this.form.email = this.$route.query.email || ''\n  },\n  methods: {\n    async submitForm() {\n      try {\n        await this.$refs.verifyForm.validate()\n        const response = await api.post('/api/auth/verify-email', this.form)\n\n        if (response.status === 200) {\n          ElMessage.success('邮箱验证成功')\n          this.$router.push('/login')\n        }\n      } catch (error) {\n        if (error.response?.status === 422) {\n          ElMessage.error('验证失败：验证码无效')\n        } else {\n          ElMessage.error('验证失败，请重试')\n        }\n      }\n    },\n    async resendCode() {\n      try {\n        const response = await api.post('/api/auth/resend-verification', {\n          email: this.form.email\n        })\n\n        if (response.status === 200) {\n          ElMessage.success('验证码已重新发送')\n        }\n      } catch (error) {\n        ElMessage.error('发送失败，请重试')\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.verify-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n  background-color: #f5f7fa;\n}\n\n.verify-card {\n  width: 480px;\n}\n\n.verify-form {\n  padding: 20px;\n}\n\nh2 {\n  text-align: center;\n  margin-bottom: 30px;\n}\n</style>\n"],"mappings":";AA2BA,SAASA,SAAQ,QAAS,cAAa;AACvC,SAASC,GAAE,QAAS,aAAY;AAEhC,eAAe;EACbC,IAAI,EAAE,aAAa;EACnBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE;QACJC,KAAK,EAAE,EAAE;QACTC,IAAI,EAAE;MACR,CAAC;MACDC,KAAK,EAAE;QACLF,KAAK,EAAE,CACL;UAAEG,QAAQ,EAAE,IAAI;UAAEC,OAAO,EAAE,SAAS;UAAEC,OAAO,EAAE;QAAO,CAAC,EACvD;UAAEC,IAAI,EAAE,OAAO;UAAEF,OAAO,EAAE,YAAY;UAAEC,OAAO,EAAE;QAAO,EACzD;QACDJ,IAAI,EAAE,CACJ;UAAEE,QAAQ,EAAE,IAAI;UAAEC,OAAO,EAAE,QAAQ;UAAEC,OAAO,EAAE;QAAO,CAAC,EACtD;UAAEE,GAAG,EAAE,CAAC;UAAEC,GAAG,EAAE,CAAC;UAAEJ,OAAO,EAAE,UAAU;UAAEC,OAAO,EAAE;QAAO;MAE3D;IACF;EACF,CAAC;EACDI,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,CAACV,IAAI,CAACC,KAAI,GAAI,IAAI,CAACU,MAAM,CAACC,KAAK,CAACX,KAAI,IAAK,EAAC;EAChD,CAAC;EACDY,OAAO,EAAE;IACP,MAAMC,UAAUA,CAAA,EAAG;MACjB,IAAI;QACF,MAAM,IAAI,CAACC,KAAK,CAACC,UAAU,CAACC,QAAQ,CAAC;QACrC,MAAMC,QAAO,GAAI,MAAMrB,GAAG,CAACsB,IAAI,CAAC,wBAAwB,EAAE,IAAI,CAACnB,IAAI;QAEnE,IAAIkB,QAAQ,CAACE,MAAK,KAAM,GAAG,EAAE;UAC3BxB,SAAS,CAACyB,OAAO,CAAC,QAAQ;UAC1B,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,QAAQ;QAC5B;MACF,EAAE,OAAOC,KAAK,EAAE;QACd,IAAIA,KAAK,CAACN,QAAQ,EAAEE,MAAK,KAAM,GAAG,EAAE;UAClCxB,SAAS,CAAC4B,KAAK,CAAC,YAAY;QAC9B,OAAO;UACL5B,SAAS,CAAC4B,KAAK,CAAC,UAAU;QAC5B;MACF;IACF,CAAC;IACD,MAAMC,UAAUA,CAAA,EAAG;MACjB,IAAI;QACF,MAAMP,QAAO,GAAI,MAAMrB,GAAG,CAACsB,IAAI,CAAC,+BAA+B,EAAE;UAC/DlB,KAAK,EAAE,IAAI,CAACD,IAAI,CAACC;QACnB,CAAC;QAED,IAAIiB,QAAQ,CAACE,MAAK,KAAM,GAAG,EAAE;UAC3BxB,SAAS,CAACyB,OAAO,CAAC,UAAU;QAC9B;MACF,EAAE,OAAOG,KAAK,EAAE;QACd5B,SAAS,CAAC4B,KAAK,CAAC,UAAU;MAC5B;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}